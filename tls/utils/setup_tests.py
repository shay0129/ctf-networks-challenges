#!/usr/bin/env python3
"""
Setup script for creating test environment and generating certificates
"""
import os
import subprocess
from pathlib import Path
import shutil

def run_command(command: str) -> None:
    """Execute shell command and check for errors"""
    try:
        subprocess.run(command, shell=True, check=True)
    except subprocess.CalledProcessError as e:
        print(f"Error executing command: {command}")
        print(f"Error: {e}")
        raise

def create_directory_structure():
    """Create test directory structure"""
    directories = [
        "tests/test_files/certificates/ca",
        "tests/test_files/certificates/valid",
        "tests/test_files/certificates/invalid",
        "tests/test_files/payloads",
        "tests/test_files/images"
    ]
    
    for directory in directories:
        Path(directory).mkdir(parents=True, exist_ok=True)
        
    # Create empty __init__.py
    Path("tests/__init__.py").touch()

def generate_ca_certificates():
    """Generate CA certificates"""
    os.chdir("tests/test_files/certificates/ca")
    
    # Generate CA private key
    run_command("openssl genrsa -out ca.key 4096")
    
    # Generate CA certificate
    run_command(
        'openssl req -x509 -new -nodes -key ca.key -sha256 -days 1024 '
        '-out ca.crt -subj "/C=IR/O=Sharif University/CN=Sharif CA"'
    )
    
    os.chdir("../../../../")

def generate_valid_certificates():
    """Generate valid client certificates"""
    os.chdir("tests/test_files/certificates/valid")
    
    # Generate client key
    run_command("openssl genrsa -out client.key 4096")
    
    # Generate CSR
    run_command(
        'openssl req -new -key client.key -out client.csr '
        '-subj "/C=IR/O=Sharif University/CN=test.sharif.edu"'
    )
    
    # Sign with CA
    run_command(
        'openssl x509 -req -in client.csr '
        '-CA ../ca/ca.crt -CAkey ../ca/ca.key -CAcreateserial '
        '-out client.crt -days 365 -sha256'
    )
    
    os.chdir("../../../../")

def generate_invalid_certificates():
    """Generate invalid test certificates"""
    os.chdir("tests/test_files/certificates/invalid")
    
    # Generate unsigned certificate
    run_command(
        'openssl req -x509 -newkey rsa:4096 -keyout invalid.key -out unsigned.crt '
        '-nodes -days 365 -subj "/C=IR/O=Sharif University/CN=test.sharif.edu"'
    )
    
    # Generate certificate with wrong country
    run_command(
        'openssl req -newkey rsa:4096 -keyout wrong_country.key -out wrong_country.csr '
        '-nodes -subj "/C=IL/O=Sharif University/CN=test.sharif.edu"'
    )
    run_command(
        'openssl x509 -req -in wrong_country.csr '
        '-CA ../ca/ca.crt -CAkey ../ca/ca.key -CAcreateserial '
        '-out wrong_country.crt -days 365 -sha256'
    )
    
    # Create example MITM certificate (normally generated by Burp)
    run_command(
        'openssl req -x509 -newkey rsa:4096 -keyout mitm.key -out mitm.crt '
        '-nodes -days 365 -subj "/C=IR/O=MITM Proxy/CN=*.sharif.edu"'
    )
    
    os.chdir("../../../../")

def create_test_files():
    """Create test payload files"""
    os.chdir("tests/test_files/payloads")
    
    # Create test CSR files
    shutil.copy("../certificates/valid/client.csr", "valid_csr.pem")
    
    with open("invalid_csr.pem", "w") as f:
        f.write("INVALID CSR CONTENT")
        
    with open("missing_fields.pem", "w") as f:
        f.write("-----BEGIN CERTIFICATE REQUEST-----\nINCOMPLETE CSR\n-----END CERTIFICATE REQUEST-----\n")
    
    os.chdir("../../../")

def create_test_modules():
    """Create Python test modules"""
    test_files = [
        "test_ca.py",
        "test_server.py",
        "test_icmp.py",
        "test_image.py",
        "test_utils.py",
        "conftest.py"
    ]
    
    for file in test_files:
        Path(f"tests/{file}").touch()

def create_readme():
    """Create test documentation"""
    readme_content = """# Test Environment

## Directory Structure
- `certificates/`: Test certificates and keys
- `payloads/`: Test CSR and request data
- `images/`: Test images for challenges

## Running Tests
```bash
# Install requirements
pip install pytest pytest-cov

# Run all tests
pytest

# Run with coverage
pytest --cov=tls tests/
```
"""
    with open("tests/README.md", "w") as f:
        f.write(readme_content)

def main():
    """Main setup function"""
    print("Creating test environment...")
    
    try:
        create_directory_structure()
        generate_ca_certificates()
        generate_valid_certificates()
        generate_invalid_certificates()
        create_test_files()
        create_test_modules()
        create_readme()
        
        print("Test environment setup complete!")
        print("\nNext steps:")
        print("1. Review generated certificates in tests/test_files/certificates/")
        print("2. Add test implementations to the created test modules")
        print("3. Run 'pytest' to execute tests")
        
    except Exception as e:
        print(f"Error setting up test environment: {e}")
        raise

if __name__ == "__main__":
    main()