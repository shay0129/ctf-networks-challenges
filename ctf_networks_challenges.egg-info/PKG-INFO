Metadata-Version: 2.4
Name: ctf-networks-challenges
Version: 1.0.0
Summary: Multi-stage CTF challenge focused on network security, TLS protocol, and encryption
Home-page: https://github.com/shay0129/ctf-networks-challenges
Author: CTF Challenge Team
Author-email: 
License: MIT
Project-URL: Bug Reports, https://github.com/shay0129/ctf-networks-challenges/issues
Project-URL: Source, https://github.com/shay0129/ctf-networks-challenges
Project-URL: Documentation, https://github.com/shay0129/ctf-networks-challenges/blob/main/README.md
Project-URL: Related Project, https://github.com/shay0129/scapy-tls-pcap-creator
Keywords: ctf,cybersecurity,tls,ssl,cryptography,networking,certificate-authority,icmp,enigma,penetration-testing,security-challenge,education
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Education
Classifier: Intended Audience :: Information Technology
Classifier: Topic :: Security
Classifier: Topic :: Education
Classifier: Topic :: System :: Networking
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Programming Language :: Python :: 3.13
Classifier: Operating System :: OS Independent
Classifier: Environment :: Console
Classifier: Environment :: Win32 (MS Windows)
Classifier: Environment :: X11 Applications
Requires-Python: >=3.8
Description-Content-Type: text/markdown
Requires-Dist: cryptography>=41.0.0
Requires-Dist: pyOpenSSL>=23.0.0
Requires-Dist: scapy>=2.5.0
Requires-Dist: psutil>=5.9.0
Provides-Extra: dev
Requires-Dist: pytest>=7.0.0; extra == "dev"
Requires-Dist: pytest-cov>=4.0.0; extra == "dev"
Requires-Dist: black>=23.0.0; extra == "dev"
Requires-Dist: flake8>=6.0.0; extra == "dev"
Provides-Extra: gui
Requires-Dist: psutil>=5.9.0; extra == "gui"
Dynamic: author
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: home-page
Dynamic: keywords
Dynamic: license
Dynamic: project-url
Dynamic: provides-extra
Dynamic: requires-dist
Dynamic: requires-python
Dynamic: summary

# CTF Challenge: TLS Handshake, Certificate Authority, and Encryption

## Project Overview
This project hosts a multi-stage Capture The Flag (CTF) challenge focused on network security, the TLS protocol, certificate management, and encrypted communication analysis. Participants are tested on their understanding of ICMP interactions, TLS handshake processes, client certificate validation with a Certificate Authority (CA), and analysis of encrypted messages.

This repository contains the server-side components and challenge logic for the CTF. The PCAP file used in some stages of this CTF (simulating TLS handshakes) is generated by a separate project: [Scapy TLS PCAP Creator](https://github.com/shay0129/scapy-tls-pcap-creator).

## Table of Contents
- [Challenge Theme](#challenge-theme)
- [Prerequisites & Required Knowledge](#prerequisites--required-knowledge)
- [Challenge Difficulty Level](#challenge-difficulty-level)
- [Subjects Covered](#subjects-covered)
- [Project Components](#project-components)
  - [CTF Server Logic](#ctf-server-logic)
  - [PCAP File (Reference)](#pcap-file-reference)
- [Challenge Structure & Stages](#challenge-structure--stages)
  - [1. ICMP Timing Challenge](#1-icmp-timing-challenge)
  - [2. Certificate Authority (CA) Challenge](#2-certificate-authority-ca-challenge)
  - [3. Image & Enigma Encryption Challenge](#3-image--enigma-encryption-challenge)
- [Challenge Completion Requirements](#challenge-completion-requirements)
- [Participant's Solution Path (Overview)](#participants-solution-path-overview)
- [Technical Skills Developed](#technical-skills-developed)
- [External Tools Utilized by Participants](#external-tools-utilized-by-participants)
- [Setup & Running the CTF Server](#setup--running-the-ctf-server)
- [Contributing](#contributing)
- [License](#license)

---
## Challenge Theme
[This section is taken from your original README and seems good as is]

The challenge is themed around the Ritchie Boys, a historical group of German-born individuals recruited by the US Army in World War II for intelligence and psychological warfare against Nazi Germany. [cite: 1]
In the context of the challenge, the Ritchie Boys Force is revived in 2025 to combat Iran's Islamic Revolutionary Guard Corps. [cite: 1]
The player's goal is to compromise an Iranian server and extract the encryption key used for the organization's radio communications. [cite: 1]

![CTF Diagram](documents/ctf-diagram.png) 
*(Ensure this diagram and its path are relevant and present in this repository)*

---
## Prerequisites & Required Knowledge

### **Recommended Skill Level: Intermediate to Advanced**

Participants should have foundational knowledge in the following areas before attempting this CTF:

#### **Essential Prerequisites:**
- **Basic Networking Concepts:**
  - Understanding of TCP/IP stack and network protocols
  - Familiarity with ICMP (ping) functionality
  - Basic knowledge of HTTP/HTTPS protocols
  - Understanding of ports and socket communication

- **Cryptography & PKI Fundamentals:**
  - Public Key Infrastructure (PKI) concepts
  - Certificate Signing Requests (CSR) structure
  - X.509 certificate format and fields
  - Basic understanding of TLS/SSL handshake process
  - Symmetric vs asymmetric encryption concepts

- **Command Line Proficiency:**
  - Basic terminal/command prompt usage
  - File system navigation and operations
  - Text editing capabilities

#### **Highly Recommended:**
- **Security Tool Experience:**
  - Wireshark for packet analysis
  - OpenSSL command-line usage
  - Basic familiarity with web proxies (Burp Suite concepts)
  - Hex editors for binary data analysis

- **Programming/Scripting:**
  - Basic Python knowledge (for understanding provided scripts)
  - Understanding of network programming concepts
  - JSON/data format parsing

- **Digital Forensics Basics:**
  - File recovery concepts
  - Understanding of file system artifacts
  - Basic steganography awareness

#### **Nice to Have:**
- **Historical Cryptography:**
  - Basic understanding of classical ciphers
  - Enigma machine operation principles
- **Audio/Media Analysis:**
  - MP3 file structure and metadata
  - Base64 encoding/decoding
- **CTF Experience:**
  - Previous participation in security challenges
  - Problem-solving methodologies

### **Learning Resources (If Needed):**
- **Networking:** CompTIA Network+ materials, Cisco networking basics
- **PKI/Cryptography:** "Cryptography Engineering" by Ferguson, Schneier, and Kohno
- **Tools:** Official Wireshark documentation, OpenSSL cookbook
- **CTF Preparation:** OverTheWire wargames, PicoCTF challenges

---
## Challenge Difficulty Level

### **Overall Rating: ⭐⭐⭐⭐☆ (Intermediate-Advanced)**

**Estimated Time to Complete:** 4-8 hours (depending on experience level)

#### **Difficulty Breakdown by Stage:**

| Stage | Difficulty | Time Estimate | Key Skills Tested |
|-------|------------|---------------|-------------------|
| **ICMP Challenge** | ⭐⭐☆☆☆ Easy-Medium | 30-60 minutes | Network packet crafting, timing precision |
| **CA Challenge** | ⭐⭐⭐⭐☆ Medium-Hard | 2-4 hours | PKI, HTTP proxying, CSR manipulation, file recovery |
| **Enigma Challenge** | ⭐⭐⭐⭐⭐ Hard | 2-3 hours | Classical cryptography, steganography, data analysis |

#### **What Makes This CTF Challenging:**
1. **Multi-Domain Integration:** Requires knowledge across networking, cryptography, and forensics
2. **Intentional Obstacles:** Built-in challenges that require problem-solving beyond technical knowledge
3. **Tool Proficiency:** Demands familiarity with multiple specialized security tools
4. **Sequential Dependencies:** Each stage builds upon the previous, requiring complete understanding
5. **Real-World Simulation:** Mimics actual penetration testing scenarios

#### **Suitable For:**
- ✅ **Cybersecurity Students** (intermediate level)
- ✅ **Security Professionals** seeking hands-on practice
- ✅ **CTF Teams** with diverse skill sets
- ✅ **Training Environments** for educational purposes

#### **Not Recommended For:**
- ❌ Complete beginners to cybersecurity
- ❌ Participants without basic networking knowledge
- ❌ Those unfamiliar with command-line tools

---
## Subjects Covered
[Adapted from your original README]

This CTF challenge helps develop a broad range of technical skills, including:
1.  **Network Protocol Analysis**: Using tools like Wireshark and Tshark to analyze network packets (e.g., ICMP, TLS). [cite: 1]
2.  **Cryptography**: Understanding key exchange, certificate signing (CSR/CA), decrypting messages, and classical ciphers (Enigma). [cite: 1]
3.  **Operating System Interaction/Forensics (Conceptual for CTF):** Analyzing server behavior (simulated), ID3 tags, Hex Editors. [cite: 1]
4.  **Problem Solving**: Applying diverse techniques to overcome sequential security challenges.
5.  **Tool Usage**: Utilizing tools like OpenSSL for certificate operations and Burp Suite for request manipulation (as part of the solution path). [cite: 1]

---
## Project Components

### CTF Server Logic
This repository contains the Python code for the CTF server which orchestrates the different challenge stages. The server listens for client interactions and presents challenges based on the participant's progress.

### PCAP File (Reference)
A pre-generated PCAP file is central to parts of this CTF, particularly the CA challenge. [cite: 1] This PCAP simulates TLS communication, including server requests for client certificates. [cite: 1]
* **Note:** The generation logic for this PCAP file resides in the [Scapy TLS PCAP Creator](https://github.com/shay0129/scapy-tls-pcap-creator) repository. This CTF assumes the availability of such a PCAP.

---
## Challenge Structure & Stages
[Combined and adapted from "Project Components" and "CTF Challenge Server Implementation" in your original README]

The CTF is comprised of three interconnected security challenges that participants must complete sequentially:

### 1. ICMP Timing Challenge
The initial stage involves precise ICMP packet interaction with the server. [cite: 1]
* Participants must send a specific number of ping requests (e.g., 5 requests). [cite: 1]
* Constraints include a timing window for the pings (e.g., 9-11 seconds). [cite: 1]
* Payload sizes for pings might need to progress in a specific manner (e.g., increasing by 100 bytes each time). [cite: 1]
* Successful completion of this stage (e.g., server prints "BBHHH!") triggers the next challenge. [cite: 1]

### 2. Certificate Authority (CA) Challenge
Upon completing the ICMP challenge, a CA server component activates to handle Certificate Signing Requests (CSRs). [cite: 1]
* Participants analyze the reference PCAP file to understand that the server requires a client certificate signed by a specific CA (e.g., "_IRGCA Root CA_"). [cite: 1]
* The challenge involves creating a CSR with specific subject details (e.g., Common Name, Organization), potentially by modifying a default CSR or creating a new one. [cite: 1]
    * Example required CSR Subject details:
        ```
        Common Name (CN): Shay
        Organizational Unit (OU): Cybersecurity Department
        Organization (O): Sharif University of Technology
        Locality (L): Tehran
        State or Province (ST): Tehran
        Country (C): IR 
        ```
        [cite: 1]
* Participants may need to use tools like Burp Suite to intercept and modify CSRs before they are signed by the CA, or use OpenSSL to create and sign CSRs if they have the CA's key and certificate. [cite: 1]
* The server validates the client certificate's Common Name and potentially other attributes like certificate length (simulating MITM detection). [cite: 1]
* **Note:** When using Burp Suite, you will only see the HTTP request (CSR) and the HTTP response containing the signed certificate (PEM block) in the response body. The actual `.crt` file is saved by the client after extracting the certificate from the HTTP response; it is not visible as a file in Burp.
* **Client certificate download:** After receiving the HTTP response from the CA server, the client extracts the certificate from the response and saves it as a `.crt` file (e.g., `client.crt`). You will need this file to authenticate to the main CTF server in the next stage.
* **Forensics twist:** The client private key is generated and saved to disk (e.g., `client.key`). Immediately after saving, the script prints `downloaded` to indicate the file was written. The file is then deleted, and the script prints `deleted` to confirm removal. Participants must use a file recovery tool such as **Recuva** (Windows) or **photorec**/**testdisk** (Linux/Windows) to recover the deleted key file (look for the filename shown in the script output) and complete the challenge.

> **Troubleshooting:**
> If the CA client fails to receive a valid certificate, check the client logs for the raw response from the CA server. The CA server will sign any valid PEM CSR, but protocol or network errors may result in a non-certificate response. The client will log the raw response to help diagnose such issues.

#### Intentional Challenge Difficulties (For CTF Organizers)

The following issues are **intentionally designed** into the challenge to increase difficulty and test participants' problem-solving skills:

1. **CSR Field Modification Challenge:** The CA client generates CSRs with incorrect subject fields (`Organization: "None"` and `Common Name: "None"`) instead of the required values. Participants must:
   - Analyze the PCAP file to identify the correct certificate subject requirements
   - Use Burp Suite (or similar proxy tools) to intercept the CSR HTTP request
   - Modify the CSR to include the correct values:
     - `Organization: "Sharif University of Technology"`
     - `Common Name: "Shay"`
   - Forward the modified CSR to obtain a valid certificate

2. **HTTP Method Challenge:** The server client sends POST requests but the main server expects GET requests. Participants must:
   - Identify the HTTP method mismatch through error analysis or traffic inspection
   - Modify the client code or use proxy tools to change `POST /resource` to `GET /resource`
   - This is a relatively easier challenge but tests basic HTTP protocol understanding

### 3. Image & Enigma Encryption Challenge
After a successful handshake in the CA stage, the server provides data leading to the final flag.
* The server may hide an Enigma encryption key within image data (steganography). [cite: 1]
* It then prints messages encrypted with an Enigma cipher, using a specific configuration (e.g., reflectors, rotor positions, plugboard settings). [cite: 1]
* The server might also send base64 encoded data representing an audio file (e.g., an MP3 file identifiable by "id3" tags) which contains the final flag. [cite: 1]

---
## Challenge Completion Requirements
[As per your original README]
1.  **ICMP Stage:** Successfully complete timing and payload challenges within request limits. [cite: 1]
2.  **CA Stage:** Submit a valid CSR, obtain a signed certificate, and establish a secure connection. [cite: 1]
3.  **Enigma Machine Stage:** Extract the encryption key, decrypt messages, and retrieve the final flag (e.g., from an audio file). [cite: 1]

---
## Participant's Solution Path (Overview)
[Adapted from "Participants Solution" in your original README]

Solving this CTF involves:
1.  **PCAP Analysis:** Using Wireshark/Tshark to understand TLS handshake details and certificate requirements from the provided PCAP. [cite: 1]
2.  **ICMP Interaction:** Crafting specific ICMP packets to satisfy the server's timing and payload criteria.
3.  **Certificate Management:** Creating/modifying CSRs, interacting with the (simulated) CA, and using the obtained client certificate to authenticate to the server. This may involve OpenSSL and Burp Suite. [cite: 1]
4.  **Steganography & Cryptography:** Analyzing provided data (e.g., image files) to find hidden keys, understanding Enigma cipher mechanics, and decrypting messages. [cite: 1]
5.  **Data Recovery:** Identifying and extracting the final flag from various data formats (e.g., audio files from base64 encoded data). [cite: 1]

---
## Technical Skills Developed
[Adapted from "Educational Value" in your original README]
* Practical understanding of Public Key Infrastructure (PKI) concepts and certificate management. [cite: 1]
* Application of classical cryptography (Enigma). [cite: 1]
* Network protocol analysis (ICMP, TLS). [cite: 1]
* Basic forensic techniques (data recovery, steganography). [cite: 1]
* Problem-solving across multiple integrated security domains. [cite: 1]

---
## External Tools Utilized by Participants

### **Required Tools:**
- **[Wireshark](https://www.wireshark.org/)** - Network packet analyzer for PCAP analysis [cite: 1]
- **[OpenSSL](https://www.openssl.org/)** - Cryptographic toolkit for certificate operations [cite: 1]
- **[Burp Suite Community](https://portswigger.net/burp/communitydownload)** - Web application security testing proxy [cite: 1]

### **Recommended Tools:**
- **Hex Editor** (HxD, ghex, or similar) - Binary data analysis [cite: 1]
- **Python 3.8+** with Scapy library - Network packet crafting
- **File Recovery Tools:**
  - **Windows:** [Recuva](https://www.ccleaner.com/recuva), [PhotoRec](https://www.cgsecurity.org/wiki/PhotoRec)
  - **Linux/macOS:** photorec, testdisk, extundelete

### **Specialized Tools:**
- **Enigma Machine Simulator/Decoder:**
  - [Cryptii Enigma](https://cryptii.com/pipes/enigma-machine)
  - [Online Enigma Simulator](https://www.101computing.net/enigma-machine-emulator/)
- **Audio Analysis Tools:**
  - **Audacity** (for audio file examination)
  - **MP3 metadata viewers** (for ID3 tag analysis)
- **Steganography Tools:**
  - **steghide** (Linux/Windows)
  - **OpenStego** (cross-platform)

### **Optional but Helpful:**
- **Network Analysis:** tshark (command-line Wireshark), tcpdump
- **Text Editors:** VS Code, Notepad++, vim/nano
- **Certificate Viewers:** Certificate Manager (Windows), Keychain Access (macOS)

---
## Setup & Running the CTF Server

### **Prerequisites:**
- Python 3.8 or higher
- Administrator/root privileges (required for ICMP packet capture)
- Network access for TLS connections

### **Installation:**

1. **Clone the repository:**
   ```powershell
   git clone https://github.com/shay0129/ctf-networks-challenges.git
   cd ctf-networks-challenges
   ```

2. **Install Python dependencies:**
   ```powershell
   pip install cryptography pyOpenSSL scapy
   ```

3. **Verify required tools are available:**
   - **Wireshark** (for PCAP analysis)
   - **OpenSSL** (for certificate operations)
   - **Burp Suite Community Edition** (for HTTP request interception)

### **Running the CTF:**

#### **Option 1: Command Line Interface**
```powershell
# Navigate to the TLS directory
cd tls

# Start the CTF server (requires admin privileges)
python ctf_server.py
```

#### **Option 2: GUI Interface**
```powershell
# Navigate to the TLS directory
cd tls

# Start the GUI version
python gui.py
```

### **Server Configuration:**
- **ICMP Challenge:** Listens for ping packets on 127.0.0.1
- **CA Server:** Runs on `127.0.0.1:9999` (HTTP over TLS)
- **Main TLS Server:** Runs on `127.0.0.1:8444` (TLS)

### **Client Tools:**
The repository includes several client tools for testing:

```powershell
# ICMP ping client
python server_challenges/ping_player.py

# CA certificate client
python ca_client.py

# TLS server client
python server_client.py
```

### **Important Notes:**
- **Windows Users:** Run PowerShell/Command Prompt as Administrator for ICMP functionality
- **Linux/macOS Users:** Use `sudo` when running the server for raw socket access
- **Firewall:** Ensure Windows Firewall allows Python applications through
- **Antivirus:** Some AV software may flag the ICMP components as suspicious

### **Troubleshooting:**
- If ICMP challenges fail, verify administrator privileges and firewall settings
- For certificate issues, ensure the `certificates/` directory has proper permissions
- Check logs in the console output for detailed error messages

---
## Contributing
Feel free to contribute to the project by opening issues or pull requests. [cite: 1]

---
## License
This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details. [cite: 1]
